package main

/*
К каким негативным последствиям может привести данный фрагмент кода, и как это исправить?
Приведите корректный пример реализации.
*/

/*
Ответ на вопрос:
Переменная justString содержит срез из строки v[:100].
Но, в Go строки являются иммутабельными, а срез всё равно
ссылается на весь массив байтов оригинальной строки v.
Это значит, что если в мы берем срез до 100, то мы все равно будем хранить в памяти всю целую строку v, т.к. так работает срез.

Если createHugeString создаёт очень большую строку,
программа будет расходовать память неэффективно, что критично, когда ресурсы ограничены.

И если строка окажется меньше чем 100 символов, то будет паника.
*/

// Исправленный вариант:
func createHugeString(size int) string {
	return string(make([]byte, size))
}

var justString string

func someFunc() {
	v := createHugeString(1 << 10) // Создаём большую строку
	// проверяем, что строка достаточно длинная
	if len(v) >= 100 {
		// Копируем первые 100 байт строки и обворачиваем их в строку (так мы избежим привязки к оригинальной строке)
		justString = string([]byte(v[:100]))
	} else {
		// обработка случая, если строка слишком короткая
		justString = v
	}
}

func main() {
	someFunc()
}
